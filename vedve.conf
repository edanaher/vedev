name = "hi there me"

chords = {
  {{keys.W, keys.E}, function(event) print("Got we chord") end}
}

chord_state = {}
function send_event_delayed(event, time)
  return function()
    if chord_state[event.code] == time then
      send_event(event.type, event.code, event.value)
      chord_state[event.code] = nil
    end
  end
end

function check_chord(event)
  if event.value == 1 then
    chord_state[event.code] = event.time
    for c, chord in ipairs(chords) do
      local found = true
      local novel = false
      for i, k in ipairs(chord[1]) do
        if k == event.code then novel = true end
        if not chord_state[k] then
          found = false
          break
        end
      end
      if found and novel then
        chord[2]()
        for i, k in ipairs(chord[1]) do
          chord_state[k] = -1
        end
        return
      end
    end
    schedule(20, send_event_delayed(event, event.time))
  elseif event.value == 0 then
    if chord_state[event.code] == -1 then
      chord_state[event.code] = nil
      return
    end
    if chord_state[event.code] then
      send_event(event.type, event.code, 1)
      chord_state[event.code] = nil
    end
    send_event(event.type, event.code, event.value)
  end
end

keymap = {
  [keys.W] = function(event) check_chord(event) return -2 end,
  [keys.E] = function(event) check_chord(event) return -2 end,
  [keys.J] = function(event) send_event(event.type, event.code, event.value) return -2 end,
  [keys.F7] = function(event) send_event(event.type, 17, event.value) schedule(10.1, function() send_event(event.type, 18, 1) send_event(event.type, 18, 0) end) return -2 end,
  [keys.F6] = function(event)
    send_event(event.type, 17, event.value)
    schedule(2000, function()
                     send_event(event.type, 18, 1)
                     send_event(event.type, 18, 0)
                   end)
    return -2 end
}
